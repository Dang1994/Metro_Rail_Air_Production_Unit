# -*- coding: utf-8 -*-
"""02_Statistical_Analysis.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1drw1sIMdoByP5MEaUYXdvDcBNFLtMPc6

# Statistical Analysis Overview

In this analysis, I perform several key statistical evaluations to understand the dataset deeply before modeling:

1. **Descriptive Statistics:**  
   - Summarize basic statistics like mean, median, standard deviation, min, max, and quartiles for each feature.

2. **Skewness Analysis:**  
   - Measure asymmetry in the distribution of each variable.  
   - Identify whether features are right-skewed (long right tail), left-skewed (long left tail), or symmetrical, which helps understand the data distribution and potential outliers.

3. **Kurtosis Analysis:**  
   - Assess the "tailedness" of each feature’s distribution.  
   - High kurtosis indicates heavy tails or outliers; low kurtosis suggests light tails.

4. **Correlation Analysis:**  
   - Examine linear relationships between pairs of features.  
   - Identify highly correlated variables (positive or negative) to avoid redundancy in modeling and multicollinearity issues.

This step-by-step statistical analysis helps to:  
- Detect data imbalances and anomalies,  
- Select relevant features for modeling,  
- Understand the underlying physical or operational system reflected in the data.
"""

!pip install kagglehub --quiet

import kagglehub
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller

# Download the dataset
path = kagglehub.dataset_download("anshtanwar/metro-train-dataset")
print("Dataset path:", path)

dataset_path = "/root/.cache/kagglehub/datasets/anshtanwar/metro-train-dataset/versions/1"
print("Files in dataset folder:")
print(os.listdir(dataset_path))

file_path = os.path.join(dataset_path, "MetroPT3(AirCompressor).csv")
df = pd.read_csv(file_path)

# Preview
df.head()

df.describe()

df.isnull().sum()

df['timestamp'] = pd.to_datetime(df['timestamp'])
df.set_index('timestamp', inplace=True)

df.drop(columns=["Unnamed: 0"], inplace=True)

df.describe()

"""### 🧠 My Understanding of the Dataset

After looking at the statistical summary of the MetroPT-3 compressor dataset, here’s how I understand each feature and what’s going on in the system:

#### 🔵 Pressure-Related Sensors:
- **TP2**: This seems to measure compressor pressure. The average is ~ 1.37 bar, but the standard deviation is high (~3.25), and I noticed some negative values – maybe due to sensor issues or when the compressor is off. A large portion of readings is close to zero.

- **TP3**: It looks like a stable pneumatic panel pressure sensor. The mean is ~8.98 bar and the values are tightly clustered – this indicates normal and stable system operation.

- **H1**: Measures pressure from the cyclonic separator. It shows high variation and even some negative values (not expected), which I think needs further investigation.


- **DV_pressure**: Seems to measure the pressure drop at the air dryer. It has a very low mean (0.056), and the median is actually negative. Most of the time the system seems offloaded here.

- **Reservoirs**: Almost identical to TP3, which makes sense because it’s likely drawing from the same pressure line.

#### 🌡 Operational Parameters:
- **Oil_temperature**: On average, it's ~62.6°C which is reasonable. The max is 89°C – this might indicate rare overheating. Something to keep an eye on.
- **Motor_current**: This tells me a lot! The current goes from 0A (off) to 4A (offloaded), 7A (loaded), and up to 9A during startup. The mean is around 2.05A, but it's not a good central measure since it's a mix of many states.

#### ⚙ Digital/Binary Features (1 = Active, 0 = Inactive):
- **COMP**: The intake valve is active about 84% of the time – that looks healthy.

- **DV_eletric**: This valve seems to do the opposite of COMP – it’s only active ~16% of the time.

- **TOWERS**: These are air dryer towers – active 92% of the time. It looks like Tower 2 is used more often.

- **MPG**: Load starter – behavior is quite similar to COMP.

- **LPS (Low Pressure Switch)**: Only active in rare cases (~0.34%). This means the system pressure is mostly stable.

- **Pressure_switch**: Almost always on (99.1%) – which is expected for a healthy system.

- **Oil_level**: Around 90% of readings say oil level is OK. That’s a good sign.


- **Caudal_impulses**: These signals seem to track airflow pulses. Active ~93.7% of the time, showing consistent flow.

### 🔍 Key Patterns I Observed:
- TP3 and Reservoir pressures are very stable → good sign.
- TP2 and H1 show odd/negative values → maybe off states or sensor error.
- Motor current helps to identify different operational phases clearly.
- COMP and MPG activate together; DV_eletric is kind of their opposite.
- Rare LPS activation means pressure rarely drops dangerously.
- Oil levels and pressure switches are healthy 90–99% of the time.

### ✅ What I Plan to Do Next:TODO

1. **Clean** up those strange negative values (TP2, H1, DV_pressure).

2. **Engineer** some useful features:
   - Add labels for motor state (Off, Offloaded, Loaded, Startup).
   - Compute pressure differentials like `TP3 - TP2`.
   - Track how long COMP or DV_eletric stays ON or OFF.
3. **Detect anomalies**:
   - Flag when LPS activates.
   - Catch high oil temperature events.
   - Watch for pressure switch turning off unexpectedly.

### ✅  **Skewness and Kurtosis**

* **Purpose**: Understand distribution shape.

  * **Skewness** tells if the data is symmetric.
  * **Kurtosis** indicates whether the data is heavy/light-tailed compared to a normal distribution.
"""

df.skew(numeric_only=True)

"""
**My Understanding of Feature Skewness (Asymmetry)**

I used **skewness** to understand how the values of each feature are distributed. Here's what I know:

* A **skewness of 0** means a feature is symmetric like a normal distribution.
* A **positive skew** tells me the values are mostly small, with some rare large ones (right-tailed).
* A **negative skew** means the values are mostly high, with rare small ones (left-tailed).

### 🔍 **What I Learned From Each Feature**

#### ✅ **1. Right-Skewed Features (Positive Values)**

* **DV\_pressure (5.72)**:
  This tells me the pressure is mostly low or zero, and only spikes occasionally. That matches the behavior during offloaded states—mostly off, but some sharp pressure drops when the compressor loads.

* **LPS (17.01)**:
  Super right-skewed. I see it’s almost always off (0), and only rarely turns on. Makes sense, since this is only triggered during emergency low-pressure situations.

* **DV\_eletric (1.85)**:
  It stays off most of the time, only switching on when the compressor is loaded. That fits with what I expect from the system logic.

* **TP2 (1.99)**:
  Shows low pressure readings usually, and occasional spikes. Probably reflects inlet pressure during idle or start.

#### ✅ **2. Left-Skewed Features (Negative Values)**

* **Towers (-3.09)**:
  This tells me one tower (Tower 2) is mostly in use. The value is usually high (1), with rare switches.

* **Pressure\_switch (-10.67)**:
  It's nearly always ON (1), which makes sense because it should be active during most operations. When it drops to 0, it might be a signal of a shutdown or fault.

* **COMP (-1.82)** and **MPG (-1.78)**:
  These features are mostly active, which shows that the compressor and intake valve are usually engaged. That matches my understanding of a running machine.

* **Oil\_level (-2.75)**:
  Mostly 1, meaning oil is usually at a good level. When it’s 0, it might mean a rare low-oil condition — could be a useful fault indicator.

* **H1 (-1.76)**:
  Tells me discharge pressure is usually high, which I expect in normal running mode.

* **Caudal\_impulses (-3.60)**:
  This is almost always active (pulsing = 1). That fits the idea that airflow is continuous when the system is on.

* **TP3 (-0.88)** and **Reservoirs (-0.89)**:
  Both are mostly high-pressure states. Tells me the system maintains pressure well.

#### ✅ **3. Nearly Symmetric Features (Close to 0)**

* **Oil\_temperature (-0.05)**:
  This one really caught my eye — it's almost perfectly symmetrical. That means the temperature is stable, and the system has good thermal regulation.

* **Motor\_current (0.45)**:
  Slightly right-skewed, meaning there are more low-current readings. Makes sense, since the motor is off or in offload mode a lot, and current spikes only during load.


### 💡 **How I Interpreted It All**

* **Digital/Binary Features** like `COMP`, `DV_eletric`, `LPS`, and `Towers` have extreme skewness. That’s expected — they spend most of their time in one state.

* **Pressure Features** help me see the real system behavior:

  * `TP2` is usually low (before compression), while `TP3` and `Reservoirs` stay high (after compression).
  * `DV_pressure` gives pressure drop — mostly zero, but spikes under load.

* **Red Flags**:
  If I ever see 0s in left-skewed features like `Pressure_switch` or `Oil_level`, I’d suspect an anomaly.
  If I see huge values in right-skewed features like `DV_pressure`, it could be a pressure surge or emergency event.

"""

df.kurtosis(numeric_only=True)

"""
**My Understanding of Feature Kurtosis**

I used **kurtosis** to understand how "peaky" or "flat" each feature’s distribution is. It shows how often extreme values (outliers) occur compared to a normal distribution.

Here’s how I interpret it:

* **Kurtosis ≈ 0** → Normal distribution (moderate tails)
* **Kurtosis > 3** → Leptokurtic → Very sharp peaks + heavy tails → more outliers
* **Kurtosis < 3** → Platykurtic → Flatter distribution → fewer outliers

Let me go feature by feature:


### 🔺 **Very High Kurtosis (Heavy Tails & Outliers)**

These features have **extreme outliers**, meaning the data is mostly near a central value but sometimes jumps far off:

* **LPS (287.40)**:
  This one really stood out. It’s binary but with huge kurtosis. To me, this means it’s almost always 0, but those rare 1s are statistically massive outliers. Matches emergency behavior.

* **Pressure\_switch (111.79)**:
  Again, mostly stuck at 1, but rare 0s are treated like deep statistical outliers. Feels like it flags critical system state changes.

* **DV\_pressure (38.71)**:
  Most of the time it’s zero, but when the system loads, pressure surges sharply. These occasional big values shoot the kurtosis way up.

* **Towers (7.56)**:
  Tower 2 (value = 1) is usually in use. When it switches to Tower 1 (0), it’s such a rare event that it gets treated like an outlier.

* **Reservoirs (7.48)**:
  Values stay tightly packed near high pressure, but there are occasional small dips or spikes, which create tail heaviness.

* **Caudal\_impulses (10.97)**:
  I noticed it pulses constantly, but rare 0s exist. These rare events have strong impact in stats, thus high kurtosis.

* **Oil\_level (5.54)**:
  The oil level stays normal (1) almost all the time. Rare drops to 0 are sharp and significant — and get counted as extreme.


### 🟡 **Moderately High Kurtosis (Mild Outliers)**

* **TP3 (7.39)**:
  It generally maintains a consistent high pressure but sometimes sees pressure drops or spikes. Those extremes give it high kurtosis.

* **COMP (1.33)**, **DV\_eletric (1.42)**, **MPG (1.18)**, **H1 (1.30)**:
  These have some mild peakedness. They usually sit at a dominant state but have enough variation for the tails to be just a bit heavier than normal. So not alarming — just shows some variability.


### ✅ **Nearly Normal Kurtosis (\~0)**

* **TP2 (2.06)**:
  Close to normal range. It fluctuates a bit but not many extreme values. I think this inlet pressure behaves more “normally.”

* **Oil\_temperature (-0.06)**:
  Very close to zero — I’d call it a perfect example of stable operation. Values are balanced without many outliers.


### 🔻 **Low Kurtosis (Flat or Wide Distributions)**

* **Motor\_current (-1.45)**:
  This surprised me. It shows a relatively **flat** distribution. So instead of being focused around a central mode, current spreads out more evenly across the range. Makes sense, as the motor might run at different levels — off, idle, or full load.


* Features like **LPS**, **Pressure\_switch**, and **DV\_pressure** act like on/off switches that are “quiet” most of the time but send a clear statistical shock when triggered.

* High kurtosis makes me alert for **rare but critical events** — like **oil level drops**, **pressure dips**, or **compressor switching states**.

* Flat kurtosis like in **motor current** tells me the system has many valid operation levels — not just one dominant value.
"""

# Pearson for linear
pearson_corr = df.corr(method='pearson')
print(pearson_corr)

"""
✅ **Strong linear relationships** (good candidates for multicollinearity check):

* `TP3` and `Reservoirs` → **0.99999** → Almost perfect positive correlation.
* `H1` and `COMP` → **0.97**, `MPG` and `COMP` → **0.98** → Very strong positive linear relations.
* `H1` and `TP2` → **-0.96**, `DV_eletric` and `COMP` → **-0.96** → Strong **negative** linear relations.

⚠️ **High correlations (positive or negative)** may cause multicollinearity issues in linear models (like Linear Regression). Variables like `TP3`, `Reservoirs`, `H1`, `COMP`, and `MPG` are highly correlated — **you may consider dropping or combining them**.


✅ **Moderate linear relations**:

* `Motor_current` shows moderate correlation with `TP2`, `TP3`, `DV_eletric`.
* `Oil_temperature` has weak-moderate relations with `TP2`, `TP3`, `DV_pressure`.


❌ **Weak or negligible relationships**:

* Variables like `Caudal_impulses`, `LPS`, `Oil_level`, and `Pressure_switch` have **low correlation** with most other variables — likely **independent**, and **may be useful** if they have predictive power.
"""



# Spearman for monotonic relationships (better for ranked or binary features)
spearman_corr = df.corr(method='spearman')
print(spearman_corr)

zero_ratio = (df == 0).sum() / len(df)
print(zero_ratio)
constant_features = df.nunique() == 1
print(constant_features)

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()
print(outliers)

"""This shows how many outliers were detected in each feature using the Interquartile Range (IQR) method:

- Features with **many outliers** (large numbers) have a lot of extreme values beyond the typical range.  
  - Examples: `TP2 (269,592)`, `H1 (241,327)`, `COMP (247,328)`, `DV_eletric (243,638)`, `MPG (253,840)` — means these features have many unusual or extreme data points.

- Features with **few or no outliers** have mostly normal data within expected ranges.  
  - Examples: `Motor_current (0)`, `Reservoirs (4,526)`, `TP3 (4,518)` — means their data is more consistent without many extreme values.


Outliers can affect model performance and analysis, so knowing how many exist helps decide if we need to clean or handle those values carefully.

### ✅ **Coefficient of Variation (CV)**

* `CV = std / mean`
* Helps in comparing variability between features regardless of units.
"""

cv = df.std(numeric_only=True) / df.mean(numeric_only=True)
print(cv)

"""The CV measures relative variability by comparing the standard deviation to the mean for each feature:

- **High CV (>1)** indicates high variability relative to the mean, suggesting less consistency or more dispersion in data.  
  - Examples: `DV_pressure (6.83)`, `LPS (17.07)`, `DV_eletric (2.29)`, `TP2 (2.38)`.

- **Moderate CV (~0.3 to 1)** reflects moderate variability.  
  - Examples: `Motor_current (1.12)`, `COMP (0.44)`, `MPG (0.45)`, `H1 (0.44)`.

- **Low CV (<0.3)** indicates stable features with low relative variability.  
  - Examples: `TP3 (0.07)`, `Reservoirs (0.07)`, `Pressure_switch (0.09)`, `Oil_temperature (0.10)`, `Oil_level (0.33)`, `Caudal_impulses (0.26)`.

These CV values help identify which features have more relative dispersion, important for feature scaling, normalization, and understanding data consistency.

### ✅  **Transition Count**

* Count how many times a signal changes value (e.g., motor turning ON/OFF).
* Shows activity frequency or system switching behavior.
"""

def count_transitions(series):
    return (series.diff() != 0).sum()

transition_counts = df.select_dtypes(include='number').apply(count_transitions)
print(transition_counts)